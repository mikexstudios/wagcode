#!/usr/bin/env python
'''
XYZ.py
-----------------
A class to represent an XYZ file.
'''
__version__ = '0.1.0'
__author__ = 'Michael Huynh (mikeh@caltech.edu)'
__website__ = 'http://www.mikexstudios.com'
__copyright__ = 'General Public License (GPL)'

#from numpy import *
#import numpy
from Struct import *

#Defining the format for XYZ file
ATOM_INDEX = 0
X_INDEX = 1
Y_INDEX = 2
Z_INDEX = 3

class XYZ:

	def __init__(self):
		pass
	
	'''
	self.rows format is:
	[atom type, x, y, z]
	'''
	def load(self, in_file):
		f = file(in_file)
		self.rows = []
		#self.rows.append(-1) #Make the 0th row nothing. We start from 1
		#Discard first two lines
		f.next()
		f.next()
		for line in f:
			fields = line.split()
			fields = map(str.strip, fields) #trim whitespace
			#Set (x,y,z) to floats
			fields[1] = float(fields[1])
			fields[2] = float(fields[2])
			fields[3] = float(fields[3])
			self.rows.append(fields) #maybe we want to append fields as tuple
		f.close()

		#print self.rows
		#print type(self.rows)
		#print self.rows.transpose()

	def find_max_value(self):
		max = Struct()
		max.x = self.rows[0][1] #Set to some initial value
		max.y = self.rows[0][2]
		max.z = self.rows[0][3]
		for row in self.rows:
			if row[1] > max.x:
				max.x = row[1]
			if row[2] > max.y:
				max.y = row[2]
			if row[3] > max.z:
				max.z = row[3]
		
		return max
	
	def find_min_value(self):
		min = Struct()
		min.x = self.rows[0][1] #Set to some initial value
		min.y = self.rows[0][2]
		min.z = self.rows[0][3]
		for row in self.rows:
			if row[1] < min.x:
				min.x = row[1]
			if row[2] < min.y:
				min.y = row[2]
			if row[3] < min.z:
				min.z = row[3]
		
		return min

	def normalize_coordinates(self):
		min = self.find_min_value()
		self.translate(-min.x, -min.y, -min.z)
		#print self.rows

	def translate(self, x, y, z):
		for index in xrange(len(self.rows)): #We don't need a copy of the row
			self.rows[index][1] += x
			self.rows[index][2] += y
			self.rows[index][3] += z

	'''
	Initial implementation will have rotation about the center. Later, we
	will allow user to define some point of rotation.
	'''
	def rotate(self, rx, ry, rz):
		pass

	'''
	Adds an XYZ object to this one.

	@param in_molecule XYZ object representation of the molecule you want to add.
	'''
	def add(self, in_molecule):
		in_molecule_listrep = in_molecule.list_representation()
		self.rows.extend(in_molecule_listrep)
		#print self.rows

	def export(self, filename):
		f = file(filename, 'w')
		#First line of XYZ file is the number of atoms
		f.write(str(len(self.rows)) + "\n")
		f.write("Generated by XYZ.py\n")
		#Now we write out each of the atoms
		for row in self.rows:
			#TODO: Maybe format the floats with printf or something so that
			#      they are all have the same spacing.
			row = map(str, row)
			f.write('    '.join(row) + "\n")
		f.close()
	
	def list_representation(self):
		return self.rows

def main():
	Ethanol = XYZ()
	Ethanol.load('ethanol.xyz')
	Ethanol.normalize_coordinates()
	Ethanol.export('ethanol2.xyz')

	Test = XYZ()
	Test.load('test.xyz')
	Ethanol.add(Test)

if __name__ == '__main__':
	main()

