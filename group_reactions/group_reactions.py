#!/usr/bin/env python
# -*- coding: utf8 -*-
'''
group_reactions.py
-----------------
The purpose of this script is to analyze the reactions file generated by the
reax_reactions.py script and group them into one long pathway. This will help us
look at reactions that occur over time.

$Id$
'''
__author__ = 'Michael Huynh (mikeh@caltech.edu)'
__website__ = 'http://www.mikexstudios.com'
__copyright__ = 'General Public License (GPL)'

import sys #For arguments and exit (in older python versions)
import os #For file exist check and splitext and path stuff
from reax.reactions_wrapper import Reactions_Wrapper

#Since we want to use /usr/bin/env to invoke python, we can't pass the -u flag
#to the interpreter in order to get unbuffered output. Nor do we want to rely on
#the environment variable PYTHONUNBUFFERED. Therefore, the only solution is to
#reopen stdout as write mode with 0 as the buffer:
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0) 

#Arguments. Set some defaults before the control file in case the user does not
#define them.
try:
    control_file= sys.argv[1] #Settings for RDF
except IndexError:
    print 'Usage: group_reactions [controlfile]'
    print 'Since no control file specified, assuming the file is: control'
    control_file = 'control'

#Source the control file:
try:
    execfile(control_file)
except IOError: 
    print 'Error: '+control_file+' does not exist!'
    sys.exit(1)
print 'Read control file successfully: '+control_file


def main():
    #reactions_wrapper = Reactions_Wrapper()

    #The idea is we want to read all the reaction into memory. We make the
    #assumption that we'll always have more memory than the reactions we read in
    #(which is very reasonable).
    reactions = get_all_reactions(rxns_file)
    print 'Parsed reaction file and loaded all reactions into memory: '+rxns_file

    #Then, we start by taking a reaction and dumping all of those molecule
    #numbers into a list. Then we search all other reactions for any molecule
    #numbers that are in this list. If so, we also add those molecule numbers to
    #the list. This continues until we've parsed through all of the reactions.
    #For each reaction we parse, we zero it out by setting it to None.
    grouped_reactions = group_reactions_in_reaction_pathway(reactions)
 
    #Open grouped reactions file for output:
    grouped_rxn_f = file(rxns_output_file, 'w')

    grouped_rxn_f.write('Grouped reactions for: '+rxns_file+"\n")
    grouped_rxn_f.write('Generated by group_reactions.py'+"\n\n\n")

    print 'Grouping reactions',
    for grouped_reaction_i, each_grouped_reaction in enumerate(grouped_reactions):
        grouped_rxn_f.write('Begin grouped reaction: '+str(grouped_reaction_i)+"\n")
        grouped_rxn_f.write('----------------------------------'+"\n")
        for each_reaction in each_grouped_reaction:
            iteration, reaction_dict = each_reaction
            output_string = str(iteration)+': ' #will get appended to
            #Print out reactants:
            reactant_formula_with_number = []
            for each_reactant in reaction_dict['reactants']:
                molecule_number, molecule_formula = each_reactant
                reactant_formula_with_number.append(molecule_formula+\
                                                    ' ('+str(molecule_number)+')')
            output_string += ' + '.join(reactant_formula_with_number)

            output_string += ' -> '

            #Print out products:
            product_formula_with_number = []
            for each_product in reaction_dict['products']:
                molecule_number, molecule_formula = each_product
                product_formula_with_number.append(molecule_formula+\
                                                    ' ('+str(molecule_number)+')')
            output_string += ' + '.join(product_formula_with_number)

            grouped_rxn_f.write(output_string+"\n")
        grouped_rxn_f.write('----------------------------------'+"\n")
        grouped_rxn_f.write('End grouped reaction'+"\n\n")
        
        #For progress bar:
        print '.',
    print "\n"+'Successfully grouped reactions into file: '+rxns_output_file

def group_reactions_in_reaction_pathway(reactions):
    '''
    Given the reactions data structure, returns a list of lists that contain
    (iteration, reaction dictionary) tuple.
    '''
    reactions_copy = reactions[:] #Make copy since we are "zeroing" out
    reactions_molecule_dictionary = {}
    grouped_reactions = [] #Holds all grouped reactions
    #Parse each reaction:
    for i, each_reaction in enumerate(reactions_copy):
        if each_reaction == None:
            continue
        #each_reaction is actually a tuple, but we'll remove it...
        iteration, each_reaction = each_reaction
        #Reset our grouped reactions:
        temp_grouped_reactions = [] #Holds grouped reactions for current reaction
        #Put all molecule numbers of this reaction in our set so that we can
        #intersect this with other sets.
        molecule_numbers_for_reaction = set(get_molecule_numbers_from_reaction(
                                            each_reaction
                                        ))
        #Also add this reaction to our grouped reaction list:
        temp_grouped_reactions.append(
            (iteration, each_reaction)
        )
        #Now compare this reaction to all other reactions:
        for i2, each_reaction2 in enumerate(reactions_copy):
            if each_reaction2 == None:
                continue
            if i == i2:
                continue #Don't compare reaction to itself.
            #Break the tuple up:
            iteration2, each_reaction2 = each_reaction2
            #We determine if molecule numbers in each_reaction2 are in
            #molecule_numbers_for_reaction by seeing if we don't get an empty
            #set when we intersect these two sets.
            each_reaction2_molecule_numbers = set(get_molecule_numbers_from_reaction(
                                                each_reaction2
                                              ))
            if len(molecule_numbers_for_reaction.intersection(
                each_reaction2_molecule_numbers)) > 0:
                #Means that we have at least one similar molecule. So we'll add
                #these numbers to our set.
                molecule_numbers_for_reaction = \
                    molecule_numbers_for_reaction.union(each_reaction2_molecule_numbers)
                #Also, add this reaction to our grouped reactions:
                temp_grouped_reactions.append(
                    (iteration2, each_reaction2)
                )
                #Now remove this reaction from our list:
                reactions_copy[i2] = None

        #Now place the grouped reactions into the bigger list:
        grouped_reactions.append(temp_grouped_reactions)
    return grouped_reactions


def get_molecule_numbers_from_reaction(reaction):
    '''
    Given a reaction (a dictionary with 'reactants' and 'product' keys and
    list of (molecule number, molecule formula)), returns a list of molecule
    numbers from that reaction.
    '''
    molecule_number_list = []
    for each_reactant in reaction['reactants']:
        molecule_number_list.append(each_reactant[0])
    for each_product in reaction['products']:
        molecule_number_list.append(each_product[0])
    return molecule_number_list

def get_all_reactions(rxns_file):
    '''
    Given a .rxns input file, returns a list of reaction entries.

    The return data structure is pretty complex. It's a list of tuples of lists
    of dictionaries which values being tuples. Example return:
    [
        (15, {'reactants': [(1, 'H'), (2, 'O')], 'products': [(3, 'H2O')]}),
        (15, {'reactants': ..., 'products': ...}), 
        (30, {'reactants': [(10, 'H'), (12, 'O')], 'products': [(13, 'H2O')]}),
        (30, {'reactants': ..., 'products': ...}), 
        etc.,
    ]
    '''
    reactions = Reactions_Wrapper()
    reactions.load(rxns_file)
    all_reactions = []
    for each_iteration_reactions in reactions:
        if each_iteration_reactions != []:
            for each_reaction in each_iteration_reactions:
                all_reactions.append(
                    (reactions.iteration, each_reaction)
                )

    return all_reactions



def tests():
    reactions = get_all_reactions(rxns_file)
    print 'Parsed reaction file and loaded all reactions into memory: '+rxns_file
   
    print reactions

    print 'All tests completed successfully!'
    sys.exit(0)


if __name__ == '__main__':
    #tests()
    main()
