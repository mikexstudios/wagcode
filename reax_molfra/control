############################################################
# Configuration file for Molecule Fragment Analysis from
# ReaxFF (molfra.out) file.
# To use: reax_molfra [this_config_file]
# (Need to run group_reactions in the same directory as
#  config file.)
# Note: This file will be sourced into a python script so
#       make sure you have correct syntax here.
# $Id$
############################################################

#Filename of the molecule fragments file (usually molfra.out).
molfra_file = 'molfra.out'

#Filename of output (# molecule fragment vs iteration) tab
#separated values (.tsv) file. The gplot file is for a pre-made
#GNUPlot script file that can generate the graph for you:
molfra_tsv_file = 'molfra.tsv'
molfra_gplot_file = 'molfra.gplot'

#Filename of output (# total molecules vs iteration) tsv file:
num_mol_tsv_file = 'nummol.tsv'
num_mol_gplot_file = 'nummol.gplot'

#Molecules to exclude from the output tsv files. (For instance,
#I would use this to exclude solvent molecules or other molecules
#that would drown out other molecules.) This is a list of string
#values:
exclude_molecules = ['H2O'] 

#Molecules to combine together. This is useful when we have molecules
#adsorbing on surfaces and we want to group all those labels together.
#The format is a list of tuples. Each tuple entry is:
#('label to be shown', r'regex expression for grouping molecules', None or 'function to call')
#If a 'function_to_call' is specified, define it in this control file.
#That function much accept molecule_formula and molecule_freq. It
#should return also molecule_formula and molecule_freq. The point of
#'function_to_call' is the ability to override either molecule_formula
#or molecule_freq depending on the inputs.
combine_molecules = [
    ('H(x)OyTiz', r'(H\d*)?O\d+Ti\d+', 'HxOyTiz_freq'),
]
def HxOyTiz_freq(molecule_formula, molecule_freq):
    '''
    Returns the molecule_formula and the number of
    hydrogens in the molecule_formula. Useful for
    giving a sense how what's adsorbed on surface.
    '''
    regex = re.compile(r'(H\d*)?(O\d+)Ti\d+')
    match = regex.match(molecule_formula)
    if match:
        #Check for H:
        if match.group(1) != None:
            Hstring = match.group(1)
            num_H = Hstring[1:]
            if num_H == '':
                num_H = 1
            num_H = int(num_H)
            molecule_freq = num_H
        molecule_formula = 'H(x)OyTiz'
    return molecule_formula, molecule_freq

#GNUPlot Version 4? (True/False)
gnuplot_4 = True

#Use line smoothing for GNUplot generation? (True/False)
smooth_lines = True
#Include points with line smoothing? (True/False)
smooth_lines_points = False 

#Thicker lines? (True/False)
#(NOTE: Currently doesn't work since gnuplot can't change line widths for png output.)
thicker_lines = False

#Large PNG output file? (True/False)
large_output = False

#Automatically Generate Graphs? (True/False)
#(If True, then this script will invoke gnuplot to generate the
# graphs.)
generate_graphs = True

#View the graphs immediately? (True, False)
#(If True, then this script will invoke the display program to 
# view the PNG generated graphs. This assumes that 
# generate_graphs = True.)
view_immediately = True
display_program = 'gqview'
